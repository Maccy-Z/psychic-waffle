import numpy as np

A = np.array([[ 288.161, -12183.2, 7417.87, -7139.53, -1145.91, -273.021, 567.662, 255.53, 854.955, 825.699, 55.8014, -138.482, 119.947, 53.7517, 416.73, ],
[ 45255.9, -1.5662e+06, 219675, -115999, -702974, -155744, 1.22188e+06, -211650, 120342, 111226, 14728.4, 10244.9, -47135.3, -61710.6, -36694.1, ],
[ 0, 437451, -584256, 473910, -500427, -112697, 962573, -224674, -6617.53, -9119.49, 7559.28, 13472, -30762.9, -47122.4, -81593.4, ],
[ 0, 0, 733559, -934854, 398999, 6752.91, -779332, 155154, -4184.41, -7442.42, -22946.5, -25200.4, 53310.3, 50025, 80863.5, ],
[ 0, 0, 0, 49748.3, -58050.5, 56049.3, -11038.1, 10970.1, -7331.91, -3969.78, 538.748, -1201.41, -2615.51, -1685.92, -2046.98, ],
[ 0, 0, 0, 0, 144886, -41046.3, -139432, 31655.7, -4708.34, -10193.8, -3185.49, 2665.08, 990.933, 4401.92, 10800.3, ],
[ 0, 0, 0, 0, 0, 27679.6, -35715, 8463.94, -1712.94, -7550.43, -1682.18, 1799.63, -1094.03, 24.5801, 3792.7, ],
[ 0, 0, 0, 0, 0, 0, 20746.1, -19412.5, 10965.6, -10515.4, -3184.93, 1091.06, -3218.41, -1704.46, -301.787, ],
[ 0, 0, 0, 0, 0, 0, 0, 13412.5, -21084, -546.089, 253.397, -1058.99, 541.693, 634.059, -1292.46, ],
[ 0, 0, 0, 0, 0, 0, 0, 0, 6511.99, 3120.48, -104.51, -413.621, 1135.57, 320.346, -675.99, ],
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 3482.47, -6164.63, 4058.64, 1053.29, -4658.55, 456.427, ],
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4785.96, -10116.2, 1017.17, 7497.44, -3066.39, ],
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3290.76, -2626.36, -313.71, 1687.94, ],
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1663.69, -7846.28, 2978.02, ],
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2789.46, -2232.5, ],
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 712.995, ],] )

print(f'{A.shape = }')

b = np.array([502.494, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0, 0, 0, 0, 0, 0])
x, residuals, rank, s = np.linalg.lstsq(A, b, rcond=None)

# Output
print("Solution x:", x)                  # The solution vector
print("Residuals:", residuals)           # Sum of squared residuals (if m > n)
print("Rank of A:", rank)                # Rank of matrix A
